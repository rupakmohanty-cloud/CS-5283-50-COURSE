// automatically generated by the FlatBuffers compiler, do not modify

package com.networking.flatbuffers.zmq;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Health extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Health getRootAsHealth(ByteBuffer _bb) { return getRootAsHealth(_bb, new Health()); }
  public static Health getRootAsHealth(ByteBuffer _bb, Health obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Health __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte dispenser() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int icemaker() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte lightbulb() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int fridgeTemp() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int freezerTemp() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte sensorStatus() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createHealth(FlatBufferBuilder builder,
      byte dispenser,
      int icemaker,
      byte lightbulb,
      int fridgeTemp,
      int freezerTemp,
      byte sensorStatus) {
    builder.startTable(6);
    Health.addFreezerTemp(builder, freezerTemp);
    Health.addFridgeTemp(builder, fridgeTemp);
    Health.addIcemaker(builder, icemaker);
    Health.addSensorStatus(builder, sensorStatus);
    Health.addLightbulb(builder, lightbulb);
    Health.addDispenser(builder, dispenser);
    return Health.endHealth(builder);
  }

  public static void startHealth(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addDispenser(FlatBufferBuilder builder, byte dispenser) { builder.addByte(0, dispenser, 0); }
  public static void addIcemaker(FlatBufferBuilder builder, int icemaker) { builder.addInt(1, icemaker, 0); }
  public static void addLightbulb(FlatBufferBuilder builder, byte lightbulb) { builder.addByte(2, lightbulb, 0); }
  public static void addFridgeTemp(FlatBufferBuilder builder, int fridgeTemp) { builder.addInt(3, fridgeTemp, 0); }
  public static void addFreezerTemp(FlatBufferBuilder builder, int freezerTemp) { builder.addInt(4, freezerTemp, 0); }
  public static void addSensorStatus(FlatBufferBuilder builder, byte sensorStatus) { builder.addByte(5, sensorStatus, 0); }
  public static int endHealth(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Health get(int j) { return get(new Health(), j); }
    public Health get(Health obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

